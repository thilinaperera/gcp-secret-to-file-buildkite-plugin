#!/bin/bash

set -euo pipefail

echo "--- :googlecloud::key: Reading secrets from GCP Secret Manager"

initialized=""

function initialize() {
  if [[ "${initialized}" -eq "1" ]]; then
    return
  fi

  local result;
  local path;

  path=$(which gcloud)
  result=$?
  if [[ $result -ne 0 ]]; then
    echo "gcloud binary is not available in \$PATH"
    exit 1
  fi

  # shellcheck disable=SC2034
  path=$(which jq)
  result=$?
  if [[ $result -ne 0 ]]; then
    echo "jq binary is not available in \$PATH"
    exit 1
  fi

  gcloud auth activate-service-account --key-file "${BUILDKITE_PLUGIN_GCP_SECRET_TO_FILE_CREDENTIALS_FILE}"

  initialized="1"
}

function load_secret_into_file() {
  local export_file_name="$1"
  local secret_name="$2"
  local secret_value

  secret_value="$(get_secret_value "${secret_name}")"

  echo "Exporting secret ${secret_name} from GCP Secret into ${PWD}/${export_file_name} file"

  printf "%s" "$secret_value" > "${PWD}/${export_file_name}"
}

function get_secret_value() {
  local secret_name="$1"
  local secret_version
  local secret_value

  secret_version=$(gcloud secrets versions list "${secret_name}" --format=json | jq -r '.[0].name')
  secret_version="${secret_version##*/}"

  local result=$?
  if [[ $result -ne 0 ]]; then
    exit 1
  fi

  secret_value=$(gcloud secrets versions access "${secret_version}" \
    --secret="${secret_name}" \
    --format='get(payload.data)' | tr '_-' '/+' | base64 -d)

  result=$?
  if [[ $result -ne 0 ]]; then
    exit 1
  fi

  echo "${secret_value}"
}

function strip_quotes() {
  echo "${1}" | sed "s/^[[:blank:]]*//g;s/[[:blank:]]*$//g;s/[\"']//g"
}

if [[ -v BUILDKITE_PLUGIN_GCP_SECRET_TO_FILE_ENV_FILE_NAME && -v BUILDKITE_PLUGIN_GCP_SECRET_TO_FILE_ENV_SECRET_NAME ]]; then

    export_file_name="${BUILDKITE_PLUGIN_GCP_SECRET_TO_FILE_ENV_FILE_NAME//BUILDKITE_PLUGIN_GCP_SECRET_TO_FILE_ENV_FILE_NAME/}"
    secret_name="$(strip_quotes "${BUILDKITE_PLUGIN_GCP_SECRET_TO_FILE_ENV_SECRET_NAME//BUILDKITE_PLUGIN_GCP_SECRET_TO_FILE_ENV_SECRET_NAME/}")"

    echo "Load secret: ${secret_name} to ${export_file_name} file"

    load_secret_into_file "${export_file_name}" "${secret_name}"
fi